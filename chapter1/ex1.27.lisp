(defun square (m) (* m m))
(defun expmod (base exp m)
  (cond ((= exp 0) 1)
        ((= (mod exp 2) 0) (mod (square (expmod base (/ exp 2) m)) m))
        (t (mod (* (mod base m) (expmod base (- exp 1) m)) m))))

(defun all-test (n)
  (defun test-it (count)
    (cond ((= count (- n 1)) t)
          ((= (expmod count n n) count) (test-it (+ count 1)))
          (t nil)))
  (test-it 1))

(princ (if (all-test 561) "561 is passed" "561 not pass"))
(princ #\Newline)
(princ (if (all-test 562) "562 is passed" "562 not pass"))
(princ #\Newline)
(princ (if (all-test 1105) "1105 is passed" "1105 not pass"))
(princ #\Newline)
(princ (if (all-test 1729) "1729 is passed" "1729 not pass"))
(princ #\Newline)
(princ (if (all-test 2465) "2465 is passed" "2465 not pass"))
(princ #\Newline)
(princ (if (all-test 2821) "2821 is passed" "2821 not pass"))
;;;(princ #\Newline)
;;; 这里会栈溢出 没想好怎么弄
;;;(princ (if (all-test 6601) "6601 is passed" "6601 not pass"))
;;;(princ #\Newline)
